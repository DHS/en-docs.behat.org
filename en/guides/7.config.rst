Configuration - ``behat.yml``
=============================

Sometimes, Behat's default configuration is not enough. Some day you'll need
some extended tools to configure your feature suite. For that day, Behat has
a very powerful configuration system based on ``YAML`` configuration files and
profiles.

``behat.yml``
-------------

All configuration happens inside a single configuration file in the ``YAML``
format. Behat looks to load ``behat.yml`` or ``config/behat.yml`` by default,
or you can tell Behat where your config file is with the ``--config`` option:

.. code-block:: bash

    $ behat --config custom-config.yml

All configuration parameters in that file are defined under a profile name root
(``default:`` for example). A profile is just a custom name you can use to
quickly switch testing configuration by using the ``--profile`` option when
executing your feature suite.

The default profile is always ``default``. All other profiles inherit
parameters from the ``default`` profile. If you only need one profile, define
all of your parameters under the ``default:`` root:

.. code-block:: yaml

    # behat.yml
    default:
        ...

Paths
~~~~~

The first configuration block is ``paths``. Parameters under this configuration
block tell Behat where to find your feature and bootstrap files:

.. code-block:: yaml
    
    # behat.yml
    default:
        paths:
            features:   '%%BEHAT_BASE_PATH%%'
            bootstrap:  '%behat.paths.features%/bootstrap'

* The ``features`` parameter defines where Behat will look for your ``*.feature``
  files.

* The ``bootstrap`` parameter defines the directory from which Behat will
  automatically load all ``*.php`` files.

.. tip::

    Notice the ``%behat.paths.features%`` and ``%%BEHAT_BASE_PATH%%``
    placeholders. These strings are predefined configuration variables and
    constants, respectively, that you can use to build very flexible
    configurations:

    * A **constant** is a placeholder that consists of upper-case letters and
      starts/ends with ``%%``. Default constants are:

        1. ``%%BEHAT_BASE_PATH%%`` - current base path (specified as
           ``feature`` argument to Behat command).
        2. ``%%BEHAT_WORK_PATH%%`` - current working path from which Behat was
           called.
        3. ``%%BEHAT_CONFIG_PATH%%`` - configuration file directory path.

    * A **variable** is a placeholder that consists of lower-case letters and
      starts/ends with a single ``%``. These variables are your current
      configuration parameters, which you can use to nest configurations.
      Usable variables are:

        1. ``%behat.paths.features%`` - default or specified by you features path.

Filters
~~~~~~~

Another very useful configuration block is the ``filters`` block. This block
defines default filters (name or tag) for your features. If you find yourself
typing the same filters again and again from run to run, it would be more
efficient for you to define them as parameters:

.. code-block:: yaml

    # behat.yml
    default:
        filters:
            tags:   '@wip'

These filter parameters (``name`` and ``tags``) accept the same strings as
the Behat ``--name`` or ``--tags`` parameters do.

Formatter
~~~~~~~~~

If you need to customize your output formatter, the ``formatter`` block is
right for you:

.. code-block:: yaml

    # behat.yml
    default:
        formatter:
            name:                       'pretty'
            parameters:
                decorated:              true
                verbose:                false
                time:                   true
                language:               'en'
                output_path:            null
                multiline_arguments:    true
                ...

* ``name`` defines the default output formatter name to use for your features.
  You could write a class name here so Behat will use your custom class as the
  default output formatter, but be careful - this class should be accessible by
  Behat and implement ``Behat\Behat\Formatter\FormatterInterface``.

* The ``parameters`` section defines additional parameters which will be
  provided into the formatter instance. As you can see, all parameters from
  this section duplicate ``behat`` tool options. You can redefine ``behat``
  formatter defaults here. Also, this is the place to specify parameters for
  your custom formatters.

Context
~~~~~~~

Sometimes you may want to use a different default `context </guides/4.context>`_
class or provide useful parameters for the context constructor from your
``behat.yml``. Use the ``context`` block to set these options:

.. code-block:: yaml

    # behat.yml
    default:
        context:
            class:          'Your\Custom\Context'
            parameters:
                base_url:   'http://test.mink.loc'

* ``class`` defines which class you want to use as the environment. This class
  should be accessible by Behat and implement ``Behat\Behat\Context\ContextInterface``.

* ``parameters`` parameters is a simple array that will be passed into the constructor
  of your context class when instantiated, which happens before each scenario.

Profiles
--------

Profiles help you define different configurations for running your feature
suite. Let's say we need 2 different configurations that share
common options, but use different formatters. Our ``behat.yml`` might
look like this:

.. code-block:: yaml

    # behat.yml
    default:
        context:
            class:      'Your\Custom\Context'
    wip:
        filters:
            tags:       '@wip'
        formatter:
            name:       'progress'
    ci:
        formatter:
            name:        'junit'
            parameters:
                output_path: '/var/temp/junit'

This file defines 2 additional profiles (additional to default). Every profile
will use ``Your\Custom\Context`` as its environment object, but the ``wip``
profile will run only scenarios with the ``@wip`` (work in progress) tag and
will output them with the ``progress`` formatter. The ``ci`` profile will run
all features and output them with the ``junit`` formatter to the
``/var/temp/junit`` path.

To run each of these custom profiles, use the ``--profile`` option:

.. code-block:: bash

    behat --profile wip
    behat --profile ci

Imports
-------

The ``imports`` block allows you to share your feature suite configuration
between projects and their test suites:

.. code-block:: bash

    # behat.yml
    imports:
        - 'some_installed_pear_package_or_lib/behat.yml'
        - '/full/path/to/custom_behat_config.yml'

All files from the ``imports`` block will be loaded by Behat and merged into
your ``behat.yml`` config.
