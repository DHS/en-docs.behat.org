Closures as Definitions and Hooks
=================================

The officially best way to add :doc:`step definitions </guides/2.definitions>`
and :doc:`hooks </guides/3.hooks>` is to write them as class or instance
methods of :doc:`context class </guides/3.hooks>`. But Behat has other way too.

Some people hate verbosity of php OOP. With Behat this problem even more
serious, because now they need to also write a text annotations for every
method with all this ``static``, ``public``, annotations and "*useless*"
method names. If you one of those people, we have an option for you:

.. code-block:: php

    <?php

    $steps->Given('/^I have ordered hot "([^"]*)"$/',
        function($world, $arg1) {
            throw new Behat\Behat\Exception\PendingException();
        }
    );

    $steps->When('/^the "([^"]*)" will be ready$/',
        function($world) {
            throw new Behat\Behat\Exception\PendingException;
        }
    );

Closured Context
----------------

In order to use closures as definitions or hooks in your suite, you'll need
to extend your ``FeatureContext`` little bit. To be able to load your closure
files, Behat will need a way to actually find them first.

Behat comes with special interface, called ``Behat\Behat\Context\ClosuredContextInterface``.
In order to use closures, your ``FeatureContext`` must implement it:

.. code-block:: php

    <?php

    namespace Behat\Behat\Context;

    interface ClosuredContextInterface extends ContextInterface
    {
        function getStepDefinitionResources();
        function getHookDefinitionResources();
    }

There's only two methods in this interface:

* `getStepDefinitionResources()` should return array of ``*.php`` paths, that
  will be used as step definition resources.

* `getHookDefinitionResources()` should return array of ``*.php`` paths, that
  will be used as hook definition resources.

For example, put next code in your ``FeatureContext``:

.. code-block:: php

    <?php # features/bootstrap/FeatureContext.php

    use Behat\Behat\Context\ClosuredContextInterface,
        Behat\Behat\Context\BehatContext;

    /**
     * Features context.
     */
    class FeatureContext extends BehatContext implements ClosuredContextInterface
    {
        public function getStepDefinitionResources()
        {
            return array(__DIR__ . '/../steps/basic_steps.php');
        }

        public function getHookDefinitionResources()
        {
            return array(__DIR__ . '/../support/hooks.php');
        }
    }

Now, Behat will try to load all `step definitions`_ from out the
``features/steps/basic_steps.php`` file and `hooks`_ from out the
``features/support/hooks.php``.

Step Definitions
----------------

Every ``*.php`` path returned from ``getStepDefinitionResources()`` will be
loaded with special provided ``$steps`` variable.

You can use ``$steps`` variable to define :doc:`step definitions </guides/2.definitions>`:

.. code-block:: php

    <?php

    $steps->Given('/^I have ordered hot "([^"]*)"$/',
        function($world, $arg1) {
            throw new Behat\Behat\Exception\PendingException();
        }
    );

In the example above, we call so-called *definition generator*. This generator
maps provided closure to specific regex.

Actual keyword (``Given``) does not matter for ``$steps`` and used only for
make your definition files more readable. It means, that previously defined
step is almost exactly the same as:

.. code-block:: php

    <?php

    $steps->SomeUnexistentKeyword('/^I have ordered hot "([^"]*)"$/',
        function($world, $arg1) {
            throw new Behat\Behat\Exception\PendingException();
        }
    );

First argument to definition generator is a regex and the second one is a
closure, that would be called on match.

First argument to closure is **always** instance of ``FeatureContext``. This
done for you to be able to share context information between scenario steps.
Classes in php have ``$this``, but closures don't (until php 5.4):

.. code-block:: php

    <?php

    $steps->Given('/^some context$/', function($world) {
        $world->someVar = 'someVal';
    });

    $steps->Then('/^outcome$/', function($world) {
        // $world->someVar === 'someVal'
    });

.. note::

    ``$world`` is always an instance of **main** ``FeatureContext`` class. This
    means, that you should provide missing methods and properties for your
    :doc:`subcontexts </guides/4.context>` by yourself:

    .. code-block:: php

        <?php # features/bootstrap/FeatureContext.php

        class FeatureContext
        {
            public function __construct(array $parameters)
            {
                $this->useContext(new SubContext($this));
            }

            public function doSomething()
            {
                // ...
            }
        }

    .. code-block:: php

        <?php # features/bootstrap/SubContext.php

        class SubContext
        {
            private $mainContext;

            public function __construct(FeatureContext $context)
            {
                $this->mainContext = $context;
            }

            public function doSomething()
            {
                $this->mainContext->doSomething();
            }
        }

Hooks
-----

Every ``*.php`` path returned from ``getHookDefinitionResources()`` will be
loaded with special provided ``$hooks`` variable.

You can use ``$hooks`` variable to define :doc:`hooks </guides/3.hooks>`:

.. code-block:: php

    <?php

    $hooks->beforeFeature('', function($event) {
        // prepare feature
    });

    $hooks->afterFeature('', function($event) {
        // teardown feature
    });

You have ability to call all hook types, described in ":doc:`/guides/3.hooks`"
chapter. The only difference is that the method names are camel-cased.

First argument to all hook generators, except ``beforeSuite`` and ``afterSuite``
is tag filter.

In other parts, closure hooks are the same as usual annotated hooks.
